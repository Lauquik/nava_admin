/**
 * @fileoverview gRPC-Web generated client stub for social
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.1
// source: events.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as events_pb from './events_pb'; // proto import: "events.proto"
import * as commons_pb from './commons_pb'; // proto import: "commons.proto"


export class EventsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateEvent = new grpcWeb.MethodDescriptor(
    '/social.Events/CreateEvent',
    grpcWeb.MethodType.UNARY,
    events_pb.CreateEventRequest,
    events_pb.EventProto,
    (request: events_pb.CreateEventRequest) => {
      return request.serializeBinary();
    },
    events_pb.EventProto.deserializeBinary
  );

  createEvent(
    request: events_pb.CreateEventRequest,
    metadata?: grpcWeb.Metadata | null): Promise<events_pb.EventProto>;

  createEvent(
    request: events_pb.CreateEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: events_pb.EventProto) => void): grpcWeb.ClientReadableStream<events_pb.EventProto>;

  createEvent(
    request: events_pb.CreateEventRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: events_pb.EventProto) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/social.Events/CreateEvent',
        request,
        metadata || {},
        this.methodDescriptorCreateEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/social.Events/CreateEvent',
    request,
    metadata || {},
    this.methodDescriptorCreateEvent);
  }

  methodDescriptorDeleteEvent = new grpcWeb.MethodDescriptor(
    '/social.Events/DeleteEvent',
    grpcWeb.MethodType.UNARY,
    events_pb.EventIdRequest,
    commons_pb.SocialStatusResponse,
    (request: events_pb.EventIdRequest) => {
      return request.serializeBinary();
    },
    commons_pb.SocialStatusResponse.deserializeBinary
  );

  deleteEvent(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<commons_pb.SocialStatusResponse>;

  deleteEvent(
    request: events_pb.EventIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: commons_pb.SocialStatusResponse) => void): grpcWeb.ClientReadableStream<commons_pb.SocialStatusResponse>;

  deleteEvent(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: commons_pb.SocialStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/social.Events/DeleteEvent',
        request,
        metadata || {},
        this.methodDescriptorDeleteEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/social.Events/DeleteEvent',
    request,
    metadata || {},
    this.methodDescriptorDeleteEvent);
  }

  methodDescriptorGetEvent = new grpcWeb.MethodDescriptor(
    '/social.Events/GetEvent',
    grpcWeb.MethodType.UNARY,
    events_pb.EventIdRequest,
    events_pb.EventProto,
    (request: events_pb.EventIdRequest) => {
      return request.serializeBinary();
    },
    events_pb.EventProto.deserializeBinary
  );

  getEvent(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<events_pb.EventProto>;

  getEvent(
    request: events_pb.EventIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: events_pb.EventProto) => void): grpcWeb.ClientReadableStream<events_pb.EventProto>;

  getEvent(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: events_pb.EventProto) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/social.Events/GetEvent',
        request,
        metadata || {},
        this.methodDescriptorGetEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/social.Events/GetEvent',
    request,
    metadata || {},
    this.methodDescriptorGetEvent);
  }

  methodDescriptorGetEventFeed = new grpcWeb.MethodDescriptor(
    '/social.Events/GetEventFeed',
    grpcWeb.MethodType.UNARY,
    events_pb.GetEventFeedRequest,
    events_pb.EventFeedResponse,
    (request: events_pb.GetEventFeedRequest) => {
      return request.serializeBinary();
    },
    events_pb.EventFeedResponse.deserializeBinary
  );

  getEventFeed(
    request: events_pb.GetEventFeedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<events_pb.EventFeedResponse>;

  getEventFeed(
    request: events_pb.GetEventFeedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: events_pb.EventFeedResponse) => void): grpcWeb.ClientReadableStream<events_pb.EventFeedResponse>;

  getEventFeed(
    request: events_pb.GetEventFeedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: events_pb.EventFeedResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/social.Events/GetEventFeed',
        request,
        metadata || {},
        this.methodDescriptorGetEventFeed,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/social.Events/GetEventFeed',
    request,
    metadata || {},
    this.methodDescriptorGetEventFeed);
  }

  methodDescriptorSubscribeEvent = new grpcWeb.MethodDescriptor(
    '/social.Events/SubscribeEvent',
    grpcWeb.MethodType.UNARY,
    events_pb.EventIdRequest,
    commons_pb.SocialStatusResponse,
    (request: events_pb.EventIdRequest) => {
      return request.serializeBinary();
    },
    commons_pb.SocialStatusResponse.deserializeBinary
  );

  subscribeEvent(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<commons_pb.SocialStatusResponse>;

  subscribeEvent(
    request: events_pb.EventIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: commons_pb.SocialStatusResponse) => void): grpcWeb.ClientReadableStream<commons_pb.SocialStatusResponse>;

  subscribeEvent(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: commons_pb.SocialStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/social.Events/SubscribeEvent',
        request,
        metadata || {},
        this.methodDescriptorSubscribeEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/social.Events/SubscribeEvent',
    request,
    metadata || {},
    this.methodDescriptorSubscribeEvent);
  }

  methodDescriptorEditEvent = new grpcWeb.MethodDescriptor(
    '/social.Events/EditEvent',
    grpcWeb.MethodType.UNARY,
    events_pb.EditEventRequest,
    commons_pb.SocialStatusResponse,
    (request: events_pb.EditEventRequest) => {
      return request.serializeBinary();
    },
    commons_pb.SocialStatusResponse.deserializeBinary
  );

  editEvent(
    request: events_pb.EditEventRequest,
    metadata?: grpcWeb.Metadata | null): Promise<commons_pb.SocialStatusResponse>;

  editEvent(
    request: events_pb.EditEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: commons_pb.SocialStatusResponse) => void): grpcWeb.ClientReadableStream<commons_pb.SocialStatusResponse>;

  editEvent(
    request: events_pb.EditEventRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: commons_pb.SocialStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/social.Events/EditEvent',
        request,
        metadata || {},
        this.methodDescriptorEditEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/social.Events/EditEvent',
    request,
    metadata || {},
    this.methodDescriptorEditEvent);
  }

  methodDescriptorUnsubscribeEvent = new grpcWeb.MethodDescriptor(
    '/social.Events/UnsubscribeEvent',
    grpcWeb.MethodType.UNARY,
    events_pb.EventIdRequest,
    commons_pb.SocialStatusResponse,
    (request: events_pb.EventIdRequest) => {
      return request.serializeBinary();
    },
    commons_pb.SocialStatusResponse.deserializeBinary
  );

  unsubscribeEvent(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<commons_pb.SocialStatusResponse>;

  unsubscribeEvent(
    request: events_pb.EventIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: commons_pb.SocialStatusResponse) => void): grpcWeb.ClientReadableStream<commons_pb.SocialStatusResponse>;

  unsubscribeEvent(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: commons_pb.SocialStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/social.Events/UnsubscribeEvent',
        request,
        metadata || {},
        this.methodDescriptorUnsubscribeEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/social.Events/UnsubscribeEvent',
    request,
    metadata || {},
    this.methodDescriptorUnsubscribeEvent);
  }

  methodDescriptorGetEventSubscribers = new grpcWeb.MethodDescriptor(
    '/social.Events/GetEventSubscribers',
    grpcWeb.MethodType.UNARY,
    events_pb.EventIdRequest,
    events_pb.UserIdList,
    (request: events_pb.EventIdRequest) => {
      return request.serializeBinary();
    },
    events_pb.UserIdList.deserializeBinary
  );

  getEventSubscribers(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<events_pb.UserIdList>;

  getEventSubscribers(
    request: events_pb.EventIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: events_pb.UserIdList) => void): grpcWeb.ClientReadableStream<events_pb.UserIdList>;

  getEventSubscribers(
    request: events_pb.EventIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: events_pb.UserIdList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/social.Events/GetEventSubscribers',
        request,
        metadata || {},
        this.methodDescriptorGetEventSubscribers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/social.Events/GetEventSubscribers',
    request,
    metadata || {},
    this.methodDescriptorGetEventSubscribers);
  }

}

