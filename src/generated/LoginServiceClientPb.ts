/**
 * @fileoverview gRPC-Web generated client stub for login
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.1
// source: login.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as login_pb from './login_pb'; // proto import: "login.proto"
import * as common_pb from './common_pb'; // proto import: "common.proto"


export class LoginClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/login.Login/Login',
    grpcWeb.MethodType.UNARY,
    login_pb.LoginRequest,
    common_pb.StatusResponse,
    (request: login_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    common_pb.StatusResponse.deserializeBinary
  );

  login(
    request: login_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<common_pb.StatusResponse>;

  login(
    request: login_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<common_pb.StatusResponse>;

  login(
    request: login_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.Login/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.Login/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorverify = new grpcWeb.MethodDescriptor(
    '/login.Login/verify',
    grpcWeb.MethodType.UNARY,
    login_pb.VerifyRequest,
    login_pb.AuthResponse,
    (request: login_pb.VerifyRequest) => {
      return request.serializeBinary();
    },
    login_pb.AuthResponse.deserializeBinary
  );

  verify(
    request: login_pb.VerifyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<login_pb.AuthResponse>;

  verify(
    request: login_pb.VerifyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: login_pb.AuthResponse) => void): grpcWeb.ClientReadableStream<login_pb.AuthResponse>;

  verify(
    request: login_pb.VerifyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: login_pb.AuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.Login/verify',
        request,
        metadata || {},
        this.methodDescriptorverify,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.Login/verify',
    request,
    metadata || {},
    this.methodDescriptorverify);
  }

}

